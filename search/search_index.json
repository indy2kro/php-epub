{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"AdvancedUsage/","text":"Advanced Usage \u00b6 Modifying EPUB Content \u00b6 To modify the content within an EPUB file, you can use the ContentManager class to access specific files, make changes, and save them. use PhpEpub\\EpubFile; use PhpEpub\\ContentManager; $epubFilePath = '/path/to/your.epub'; // Load the EPUB file $epubFile = new EpubFile($epubFilePath); $epubFile->load(); // Access the content manager $tempDir = $epubFile->getTempDir(); $contentManager = new ContentManager($tempDir); // Retrieve and modify content $contentFile = 'chapter1.xhtml'; $content = $contentManager->getContent($contentFile); $modifiedContent = str_replace('Old Text', 'New Text', $content); // Save the modified content $contentManager->updateContent($contentFile, $modifiedContent); Saving Changes \u00b6 Save to the Same File \u00b6 To save changes to the same EPUB file: $epubFile->save(); This will overwrite the original EPUB file with the modified content. Save as a New File \u00b6 To save the modified EPUB as a new file: $newEpubFilePath = '/path/to/new.epub'; $epubFile->save($newEpubFilePath); This will create a new EPUB file with the changes, leaving the original file unchanged. Converting EPUB \u00b6 You can convert an EPUB to PDF using one of the available adapters. Convert to PDF Using DompdfAdapter \u00b6 use PhpEpub\\Converters\\DompdfAdapter; $dompdfAdapter = new DompdfAdapter(); $dompdfAdapter->convert('/path/to/extracted/epub', '/path/to/output.pdf'); Convert to PDF Using TCPDFAdapter \u00b6 To convert using TCPDF: use PhpEpub\\Converters\\TCPDFAdapter; $tcpdfAdapter = new TCPDFAdapter(); $tcpdfAdapter->convert('/path/to/extracted/epub', '/path/to/output.pdf'); Convert to MOBI Using CalibreAdapter \u00b6 To convert using Calibre: use PhpEpub\\Converters\\CalibreAdapter; $options = [ 'calibre_path' => '/usr/bin/ebook-convert', 'extra_args' => '--output-profile kindle', ]; $calibreAdapter = new CalibreAdapter($options); $calibreAdapter->convert('/path/to/input.epub', '/path/to/output.mobi');","title":"Advanced Features"},{"location":"AdvancedUsage/#advanced-usage","text":"","title":"Advanced Usage"},{"location":"AdvancedUsage/#modifying-epub-content","text":"To modify the content within an EPUB file, you can use the ContentManager class to access specific files, make changes, and save them. use PhpEpub\\EpubFile; use PhpEpub\\ContentManager; $epubFilePath = '/path/to/your.epub'; // Load the EPUB file $epubFile = new EpubFile($epubFilePath); $epubFile->load(); // Access the content manager $tempDir = $epubFile->getTempDir(); $contentManager = new ContentManager($tempDir); // Retrieve and modify content $contentFile = 'chapter1.xhtml'; $content = $contentManager->getContent($contentFile); $modifiedContent = str_replace('Old Text', 'New Text', $content); // Save the modified content $contentManager->updateContent($contentFile, $modifiedContent);","title":"Modifying EPUB Content"},{"location":"AdvancedUsage/#saving-changes","text":"","title":"Saving Changes"},{"location":"AdvancedUsage/#save-to-the-same-file","text":"To save changes to the same EPUB file: $epubFile->save(); This will overwrite the original EPUB file with the modified content.","title":"Save to the Same File"},{"location":"AdvancedUsage/#save-as-a-new-file","text":"To save the modified EPUB as a new file: $newEpubFilePath = '/path/to/new.epub'; $epubFile->save($newEpubFilePath); This will create a new EPUB file with the changes, leaving the original file unchanged.","title":"Save as a New File"},{"location":"AdvancedUsage/#converting-epub","text":"You can convert an EPUB to PDF using one of the available adapters.","title":"Converting EPUB"},{"location":"AdvancedUsage/#convert-to-pdf-using-dompdfadapter","text":"use PhpEpub\\Converters\\DompdfAdapter; $dompdfAdapter = new DompdfAdapter(); $dompdfAdapter->convert('/path/to/extracted/epub', '/path/to/output.pdf');","title":"Convert to PDF Using DompdfAdapter"},{"location":"AdvancedUsage/#convert-to-pdf-using-tcpdfadapter","text":"To convert using TCPDF: use PhpEpub\\Converters\\TCPDFAdapter; $tcpdfAdapter = new TCPDFAdapter(); $tcpdfAdapter->convert('/path/to/extracted/epub', '/path/to/output.pdf');","title":"Convert to PDF Using TCPDFAdapter"},{"location":"AdvancedUsage/#convert-to-mobi-using-calibreadapter","text":"To convert using Calibre: use PhpEpub\\Converters\\CalibreAdapter; $options = [ 'calibre_path' => '/usr/bin/ebook-convert', 'extra_args' => '--output-profile kindle', ]; $calibreAdapter = new CalibreAdapter($options); $calibreAdapter->convert('/path/to/input.epub', '/path/to/output.mobi');","title":"Convert to MOBI Using CalibreAdapter"},{"location":"BasicUsage/","text":"Basic Usage \u00b6 Loading an EPUB File \u00b6 To load an EPUB file, use the EpubFile class: use PhpEpub\\EpubFile; $epubFile = new EpubFile('/path/to/your.epub'); $epubFile->load(); Accessing Metadata \u00b6 Once the EPUB is loaded, you can access and modify its metadata: $metadata = $epubFile->getMetadata(); $title = $metadata->getTitle(); $metadata->setTitle('New Title'); $metadata->save();","title":"Basic Usage"},{"location":"BasicUsage/#basic-usage","text":"","title":"Basic Usage"},{"location":"BasicUsage/#loading-an-epub-file","text":"To load an EPUB file, use the EpubFile class: use PhpEpub\\EpubFile; $epubFile = new EpubFile('/path/to/your.epub'); $epubFile->load();","title":"Loading an EPUB File"},{"location":"BasicUsage/#accessing-metadata","text":"Once the EPUB is loaded, you can access and modify its metadata: $metadata = $epubFile->getMetadata(); $title = $metadata->getTitle(); $metadata->setTitle('New Title'); $metadata->save();","title":"Accessing Metadata"},{"location":"ContentManager/","text":"ContentManager \u00b6 The ContentManager class in the PHP EPUB Processor library is responsible for managing the content files within an EPUB. It provides methods to list, add, update, delete, and retrieve content files, ensuring efficient content management within the EPUB structure. Key Methods \u00b6 __construct(string $contentDirectory) : Initializes the ContentManager with the directory containing the EPUB content. Throws an exception if the directory does not exist. getContentList(): array : Returns a list of all content file paths within the EPUB. addContent(string $filePath, string $content): void : Adds a new content file at the specified path with the given content. Throws an exception if the file cannot be created. updateContent(string $filePath, string $newContent): void : Updates an existing content file with new content. Throws an exception if the file does not exist or cannot be updated. deleteContent(string $filePath): void : Deletes a content file from the EPUB. Throws an exception if the file does not exist or cannot be deleted. getContent(string $filePath): string : Retrieves the content of a specified file. Throws an exception if the file does not exist or cannot be read. Usage Example \u00b6 use PhpEpub\\ContentManager; $contentDirectory = '/path/to/extracted/epub/content'; $contentManager = new ContentManager($contentDirectory); // List all content files $contentFiles = $contentManager->getContentList(); print_r($contentFiles); // Add a new content file $contentManager->addContent('new-chapter.xhtml', '&lt;h1&gt;New Chapter&lt;/h1&gt;<p>This is a new chapter.</p>'); // Update an existing content file $contentManager->updateContent('existing-chapter.xhtml', '&lt;h1&gt;Updated Chapter&lt;/h1&gt;<p>Updated content.</p>'); // Delete a content file $contentManager->deleteContent('old-chapter.xhtml'); // Retrieve content from a file $content = $contentManager->getContent('chapter1.xhtml'); echo $content;","title":"ContentManager"},{"location":"ContentManager/#contentmanager","text":"The ContentManager class in the PHP EPUB Processor library is responsible for managing the content files within an EPUB. It provides methods to list, add, update, delete, and retrieve content files, ensuring efficient content management within the EPUB structure.","title":"ContentManager"},{"location":"ContentManager/#key-methods","text":"__construct(string $contentDirectory) : Initializes the ContentManager with the directory containing the EPUB content. Throws an exception if the directory does not exist. getContentList(): array : Returns a list of all content file paths within the EPUB. addContent(string $filePath, string $content): void : Adds a new content file at the specified path with the given content. Throws an exception if the file cannot be created. updateContent(string $filePath, string $newContent): void : Updates an existing content file with new content. Throws an exception if the file does not exist or cannot be updated. deleteContent(string $filePath): void : Deletes a content file from the EPUB. Throws an exception if the file does not exist or cannot be deleted. getContent(string $filePath): string : Retrieves the content of a specified file. Throws an exception if the file does not exist or cannot be read.","title":"Key Methods"},{"location":"ContentManager/#usage-example","text":"use PhpEpub\\ContentManager; $contentDirectory = '/path/to/extracted/epub/content'; $contentManager = new ContentManager($contentDirectory); // List all content files $contentFiles = $contentManager->getContentList(); print_r($contentFiles); // Add a new content file $contentManager->addContent('new-chapter.xhtml', '&lt;h1&gt;New Chapter&lt;/h1&gt;<p>This is a new chapter.</p>'); // Update an existing content file $contentManager->updateContent('existing-chapter.xhtml', '&lt;h1&gt;Updated Chapter&lt;/h1&gt;<p>Updated content.</p>'); // Delete a content file $contentManager->deleteContent('old-chapter.xhtml'); // Retrieve content from a file $content = $contentManager->getContent('chapter1.xhtml'); echo $content;","title":"Usage Example"},{"location":"Converter/","text":"Converter \u00b6 The Converter class in the PHP EPUB Processor library is responsible for converting EPUB files into various formats. It utilizes different converter adapters to handle specific formats, such as PDF or MOBI, providing a flexible and extensible conversion system. Key Methods \u00b6 __construct(string $epubDirectory, array $adapters) : Initializes the Converter with the directory containing the EPUB contents and a map of format-specific converter adapters. Throws an exception if the directory does not exist. convert(string $format, string $outputPath): void : Converts the EPUB to the specified format using the appropriate adapter. Throws an exception if the format is not supported or if the conversion fails. Usage Example \u00b6 use PhpEpub\\Converter; use PhpEpub\\Converters\\CalibreAdapter; use PhpEpub\\Converters\\DompdfAdapter; $epubDirectory = '/path/to/extracted/epub'; $adapters = [ 'pdf' => new DompdfAdapter(), 'mobi' => new CalibreAdapter(), ]; $converter = new Converter($epubDirectory, $adapters); try { $converter->convert('pdf', '/path/to/output.pdf'); echo \"EPUB successfully converted to PDF.\"; $converter->convert('mobi', '/path/to/output.mobi'); echo \"EPUB successfully converted to PDF.\"; } catch (Exception $e) { echo \"Conversion failed: \" . $e->getMessage(); }","title":"Converter"},{"location":"Converter/#converter","text":"The Converter class in the PHP EPUB Processor library is responsible for converting EPUB files into various formats. It utilizes different converter adapters to handle specific formats, such as PDF or MOBI, providing a flexible and extensible conversion system.","title":"Converter"},{"location":"Converter/#key-methods","text":"__construct(string $epubDirectory, array $adapters) : Initializes the Converter with the directory containing the EPUB contents and a map of format-specific converter adapters. Throws an exception if the directory does not exist. convert(string $format, string $outputPath): void : Converts the EPUB to the specified format using the appropriate adapter. Throws an exception if the format is not supported or if the conversion fails.","title":"Key Methods"},{"location":"Converter/#usage-example","text":"use PhpEpub\\Converter; use PhpEpub\\Converters\\CalibreAdapter; use PhpEpub\\Converters\\DompdfAdapter; $epubDirectory = '/path/to/extracted/epub'; $adapters = [ 'pdf' => new DompdfAdapter(), 'mobi' => new CalibreAdapter(), ]; $converter = new Converter($epubDirectory, $adapters); try { $converter->convert('pdf', '/path/to/output.pdf'); echo \"EPUB successfully converted to PDF.\"; $converter->convert('mobi', '/path/to/output.mobi'); echo \"EPUB successfully converted to PDF.\"; } catch (Exception $e) { echo \"Conversion failed: \" . $e->getMessage(); }","title":"Usage Example"},{"location":"EpubFile/","text":"EpubFile \u00b6 The EpubFile class is a core component of the PHP EPUB Processor library. It provides functionality to load, manipulate, and save EPUB files. This class handles the extraction of EPUB contents, parsing of metadata, and management of the EPUB file structure. Key Methods \u00b6 __construct(string $filePath) : Initializes the EpubFile object with the path to the EPUB file. load(): void : Loads the EPUB file, extracting its contents to a temporary directory and parsing its metadata and spine. save(?string $filePath = null): void : Saves the current state of the EPUB file back to disk. If no file path is provided, it overwrites the original file. getTempDir(): ?string : Returns the path to the temporary directory where the EPUB contents are extracted. getMetadata(): ?Metadata : Retrieves the metadata object associated with the EPUB file. getSpine(): ?Spine : Retrieves the spine object, which represents the reading order of the EPUB content. Usage Example \u00b6 use PhpEpub\\EpubFile; $epubFile = new EpubFile('/path/to/your.epub'); $epubFile->load(); // make changes // Save changes $epubFile->save(); Destruction \u00b6 The __destruct() method ensures that the temporary directory used during processing is cleaned up, preventing any leftover files from occupying disk space.","title":"EpubFile"},{"location":"EpubFile/#epubfile","text":"The EpubFile class is a core component of the PHP EPUB Processor library. It provides functionality to load, manipulate, and save EPUB files. This class handles the extraction of EPUB contents, parsing of metadata, and management of the EPUB file structure.","title":"EpubFile"},{"location":"EpubFile/#key-methods","text":"__construct(string $filePath) : Initializes the EpubFile object with the path to the EPUB file. load(): void : Loads the EPUB file, extracting its contents to a temporary directory and parsing its metadata and spine. save(?string $filePath = null): void : Saves the current state of the EPUB file back to disk. If no file path is provided, it overwrites the original file. getTempDir(): ?string : Returns the path to the temporary directory where the EPUB contents are extracted. getMetadata(): ?Metadata : Retrieves the metadata object associated with the EPUB file. getSpine(): ?Spine : Retrieves the spine object, which represents the reading order of the EPUB content.","title":"Key Methods"},{"location":"EpubFile/#usage-example","text":"use PhpEpub\\EpubFile; $epubFile = new EpubFile('/path/to/your.epub'); $epubFile->load(); // make changes // Save changes $epubFile->save();","title":"Usage Example"},{"location":"EpubFile/#destruction","text":"The __destruct() method ensures that the temporary directory used during processing is cleaned up, preventing any leftover files from occupying disk space.","title":"Destruction"},{"location":"Index/","text":"PHP EPUB Processor \u00b6 A PHP library for processing EPUB files, including parsing, metadata manipulation, and format conversion. This library provides tools to handle EPUB files efficiently, offering features like validation, content management, and conversion to other formats using various adapters. Features \u00b6 EPUB Loading and Saving : Easily load and save EPUB files. Metadata Management : Read and update metadata such as title, authors, and language. Content Management : Add, update, and delete content files within an EPUB. Validation : Validate the structure and content of EPUB files. Conversion : Convert EPUB files to PDF and other formats using adapters for TCPDF, Dompdf, and Calibre. Prerequisites \u00b6 Before you begin, ensure you have the following installed on your system: PHP : Version 8.2 or higher. PHP Extensions : ext-xml , ext-zip . Composer : For managing PHP dependencies. Calibre : If you plan to use the CalibreAdapter for conversions. Dompdf : If you plan to use the DompdfAdapter for PDF conversions. TCPDF : If you plan to use the TCPDFAdapter for PDF conversions.","title":"PHP EPUB Processor"},{"location":"Index/#php-epub-processor","text":"A PHP library for processing EPUB files, including parsing, metadata manipulation, and format conversion. This library provides tools to handle EPUB files efficiently, offering features like validation, content management, and conversion to other formats using various adapters.","title":"PHP EPUB Processor"},{"location":"Index/#features","text":"EPUB Loading and Saving : Easily load and save EPUB files. Metadata Management : Read and update metadata such as title, authors, and language. Content Management : Add, update, and delete content files within an EPUB. Validation : Validate the structure and content of EPUB files. Conversion : Convert EPUB files to PDF and other formats using adapters for TCPDF, Dompdf, and Calibre.","title":"Features"},{"location":"Index/#prerequisites","text":"Before you begin, ensure you have the following installed on your system: PHP : Version 8.2 or higher. PHP Extensions : ext-xml , ext-zip . Composer : For managing PHP dependencies. Calibre : If you plan to use the CalibreAdapter for conversions. Dompdf : If you plan to use the DompdfAdapter for PDF conversions. TCPDF : If you plan to use the TCPDFAdapter for PDF conversions.","title":"Prerequisites"},{"location":"Installation/","text":"Installation \u00b6 Use Composer to install the PHP EPUB Processor library by running the following command: composer require indy2kro/php-epub","title":"Installation"},{"location":"Installation/#installation","text":"Use Composer to install the PHP EPUB Processor library by running the following command: composer require indy2kro/php-epub","title":"Installation"},{"location":"Metadata/","text":"Metadata \u00b6 The Metadata class in the PHP EPUB Processor library is responsible for managing the metadata of an EPUB file. This includes operations such as reading and updating the title, authors, language, and other metadata fields. Key Methods \u00b6 __construct(SimpleXMLElement $opfXml, string $opfFilePath) : Initializes the Metadata object with the OPF XML data and its file path. It also identifies the Dublin Core (dc) namespace used for metadata. save(): void : Saves the updated OPF file back to disk. Throws an exception if the file cannot be saved. getOpfFilePath(): string : Returns the file path of the OPF file. Traits \u00b6 The Metadata class uses several traits to interact with specific metadata fields: InteractsWithTitle : Methods for getting and setting the title. InteractsWithDescription : Methods for managing the description. InteractsWithDate : Methods for handling date-related metadata. InteractsWithAuthors : Methods for managing author information. InteractsWithPublisher : Methods for handling publisher details. InteractsWithLanguage : Methods for managing language metadata. InteractsWithSubject : Methods for handling subject-related metadata. InteractsWithIdentifier : Methods for managing identifiers like ISBN. Usage Example \u00b6 use PhpEpub\\EpubFile; $epubFilePath = '/path/to/your.epub'; $epubFile = new EpubFile($epubFilePath); $epubFile->load(); $metadata = $epubFile->getMetadata(); $title = $metadata->getTitle(); $metadata->setTitle('New Title'); $metadata->save(); $epubFile->save();","title":"Metadata"},{"location":"Metadata/#metadata","text":"The Metadata class in the PHP EPUB Processor library is responsible for managing the metadata of an EPUB file. This includes operations such as reading and updating the title, authors, language, and other metadata fields.","title":"Metadata"},{"location":"Metadata/#key-methods","text":"__construct(SimpleXMLElement $opfXml, string $opfFilePath) : Initializes the Metadata object with the OPF XML data and its file path. It also identifies the Dublin Core (dc) namespace used for metadata. save(): void : Saves the updated OPF file back to disk. Throws an exception if the file cannot be saved. getOpfFilePath(): string : Returns the file path of the OPF file.","title":"Key Methods"},{"location":"Metadata/#traits","text":"The Metadata class uses several traits to interact with specific metadata fields: InteractsWithTitle : Methods for getting and setting the title. InteractsWithDescription : Methods for managing the description. InteractsWithDate : Methods for handling date-related metadata. InteractsWithAuthors : Methods for managing author information. InteractsWithPublisher : Methods for handling publisher details. InteractsWithLanguage : Methods for managing language metadata. InteractsWithSubject : Methods for handling subject-related metadata. InteractsWithIdentifier : Methods for managing identifiers like ISBN.","title":"Traits"},{"location":"Metadata/#usage-example","text":"use PhpEpub\\EpubFile; $epubFilePath = '/path/to/your.epub'; $epubFile = new EpubFile($epubFilePath); $epubFile->load(); $metadata = $epubFile->getMetadata(); $title = $metadata->getTitle(); $metadata->setTitle('New Title'); $metadata->save(); $epubFile->save();","title":"Usage Example"},{"location":"Parser/","text":"Parser \u00b6 The Parser class in the PHP EPUB Processor library is responsible for parsing the structure of an EPUB file. It validates the essential components of the EPUB, such as the mimetype, OPF, and NCX files, ensuring that the EPUB file is correctly structured and ready for further processing. Key Methods \u00b6 __construct(XmlParser $xmlParser = new XmlParser()) : Initializes the Parser with an XmlParser instance, which is used for XML parsing tasks. parse(string $directory): string : Parses the EPUB file structure within the specified directory. It validates the mimetype, extracts the OPF path from the container, and validates the OPF file. Returns the path to the OPF file. validateMimetype(string $directory): void : Validates the presence and content of the mimetype file, ensuring it is correctly set to application/epub+zip . extractOpfPath(string $containerPath): string : Extracts the OPF file path from the container.xml file, which defines the location of the OPF file within the EPUB. validateOpf(string $opfPath): void : Validates the OPF file and checks for the presence of the NCX file, ensuring the EPUB's manifest and navigation are correctly defined. validateNcx(string $ncxPath): void : Validates the NCX file, ensuring it contains a valid navMap element for navigation. Usage Example \u00b6 use PhpEpub\\Parser; use PhpEpub\\XmlParser; $directory = '/path/to/extracted/epub'; $parser = new Parser(new XmlParser()); try { $opfPath = $parser->parse($directory); echo \"OPF file located at: $opfPath\"; } catch (Exception $e) { echo \"Error parsing EPUB: \" . $e->getMessage(); }","title":"Parser"},{"location":"Parser/#parser","text":"The Parser class in the PHP EPUB Processor library is responsible for parsing the structure of an EPUB file. It validates the essential components of the EPUB, such as the mimetype, OPF, and NCX files, ensuring that the EPUB file is correctly structured and ready for further processing.","title":"Parser"},{"location":"Parser/#key-methods","text":"__construct(XmlParser $xmlParser = new XmlParser()) : Initializes the Parser with an XmlParser instance, which is used for XML parsing tasks. parse(string $directory): string : Parses the EPUB file structure within the specified directory. It validates the mimetype, extracts the OPF path from the container, and validates the OPF file. Returns the path to the OPF file. validateMimetype(string $directory): void : Validates the presence and content of the mimetype file, ensuring it is correctly set to application/epub+zip . extractOpfPath(string $containerPath): string : Extracts the OPF file path from the container.xml file, which defines the location of the OPF file within the EPUB. validateOpf(string $opfPath): void : Validates the OPF file and checks for the presence of the NCX file, ensuring the EPUB's manifest and navigation are correctly defined. validateNcx(string $ncxPath): void : Validates the NCX file, ensuring it contains a valid navMap element for navigation.","title":"Key Methods"},{"location":"Parser/#usage-example","text":"use PhpEpub\\Parser; use PhpEpub\\XmlParser; $directory = '/path/to/extracted/epub'; $parser = new Parser(new XmlParser()); try { $opfPath = $parser->parse($directory); echo \"OPF file located at: $opfPath\"; } catch (Exception $e) { echo \"Error parsing EPUB: \" . $e->getMessage(); }","title":"Usage Example"},{"location":"Spine/","text":"Spine \u00b6 The Spine class in the PHP EPUB Processor library is responsible for managing the reading order of the content within an EPUB file. It parses the spine section of the OPF file to determine the sequence in which the content should be presented to the reader. Key Methods \u00b6 __construct(SimpleXMLElement $opfXml) : Initializes the Spine object with the OPF XML data. It parses the spine section to extract the reading order of the content items. get(): array : Returns an array of item IDs that represent the reading order of the EPUB content. Each ID corresponds to a content item defined in the manifest section of the OPF file. Usage Example \u00b6 use PhpEpub\\EpubFile; $epubFilePath = '/path/to/your.epub'; $epubFile = new EpubFile($epubFilePath); $epubFile->load(); $spine = $epubFile->getSpine(); $readingOrder = $spine->get(); foreach ($readingOrder as $itemId) { echo \"Content item ID in reading order: $itemId\\n\"; }","title":"Spine"},{"location":"Spine/#spine","text":"The Spine class in the PHP EPUB Processor library is responsible for managing the reading order of the content within an EPUB file. It parses the spine section of the OPF file to determine the sequence in which the content should be presented to the reader.","title":"Spine"},{"location":"Spine/#key-methods","text":"__construct(SimpleXMLElement $opfXml) : Initializes the Spine object with the OPF XML data. It parses the spine section to extract the reading order of the content items. get(): array : Returns an array of item IDs that represent the reading order of the EPUB content. Each ID corresponds to a content item defined in the manifest section of the OPF file.","title":"Key Methods"},{"location":"Spine/#usage-example","text":"use PhpEpub\\EpubFile; $epubFilePath = '/path/to/your.epub'; $epubFile = new EpubFile($epubFilePath); $epubFile->load(); $spine = $epubFile->getSpine(); $readingOrder = $spine->get(); foreach ($readingOrder as $itemId) { echo \"Content item ID in reading order: $itemId\\n\"; }","title":"Usage Example"},{"location":"XmlParser/","text":"XmlParser \u00b6 The XmlParser class in the PHP EPUB Processor library is responsible for handling XML file operations. It provides methods to load and save XML files, ensuring that the XML data is correctly parsed and stored. Key Methods \u00b6 parse(string $filePath): SimpleXMLElement : Loads an XML file from the specified path and returns it as a SimpleXMLElement . Throws an exception if the file cannot be found or loaded. save(SimpleXMLElement $xml, string $filePath): void : Saves a SimpleXMLElement to the specified file path. Throws an exception if the file cannot be saved. Usage Example \u00b6 use PhpEpub\\XmlParser; $xmlParser = new XmlParser(); try { // Load an XML file $xml = $xmlParser->parse('/path/to/file.xml'); echo \"XML loaded successfully.\"; // Modify the XML as needed $xml->addChild('newElement', 'value'); // Save the modified XML back to a file $xmlParser->save($xml, '/path/to/modified_file.xml'); echo \"XML saved successfully.\"; } catch (Exception $e) { echo \"Error handling XML: \" . $e->getMessage(); }","title":"XmlParser"},{"location":"XmlParser/#xmlparser","text":"The XmlParser class in the PHP EPUB Processor library is responsible for handling XML file operations. It provides methods to load and save XML files, ensuring that the XML data is correctly parsed and stored.","title":"XmlParser"},{"location":"XmlParser/#key-methods","text":"parse(string $filePath): SimpleXMLElement : Loads an XML file from the specified path and returns it as a SimpleXMLElement . Throws an exception if the file cannot be found or loaded. save(SimpleXMLElement $xml, string $filePath): void : Saves a SimpleXMLElement to the specified file path. Throws an exception if the file cannot be saved.","title":"Key Methods"},{"location":"XmlParser/#usage-example","text":"use PhpEpub\\XmlParser; $xmlParser = new XmlParser(); try { // Load an XML file $xml = $xmlParser->parse('/path/to/file.xml'); echo \"XML loaded successfully.\"; // Modify the XML as needed $xml->addChild('newElement', 'value'); // Save the modified XML back to a file $xmlParser->save($xml, '/path/to/modified_file.xml'); echo \"XML saved successfully.\"; } catch (Exception $e) { echo \"Error handling XML: \" . $e->getMessage(); }","title":"Usage Example"},{"location":"ZipHandler/","text":"ZipHandler \u00b6 The ZipHandler class in the PHP EPUB Processor library is responsible for handling ZIP file operations. It provides methods to extract contents from a ZIP file and to compress a directory into a ZIP file, facilitating the manipulation of EPUB files which are essentially ZIP archives. Key Methods \u00b6 extract(string $zipFilePath, string $destination): void : Extracts the contents of a ZIP file to the specified directory. Throws an exception if the ZIP file cannot be opened or extracted. compress(string $source, string $zipFilePath): void : Compresses a directory into a ZIP file at the specified path. Throws an exception if the ZIP file cannot be created or if the source directory is invalid. Usage Example \u00b6 use PhpEpub\\ZipHandler; $zipHandler = new ZipHandler(); try { // Extract a ZIP file $zipHandler->extract('/path/to/file.zip', '/path/to/destination'); echo \"ZIP file extracted successfully.\"; // Compress a directory into a ZIP file $zipHandler->compress('/path/to/source', '/path/to/output.zip'); echo \"Directory compressed into ZIP file successfully.\"; } catch (Exception $e) { echo \"Error handling ZIP file: \" . $e->getMessage(); }","title":"ZipHandler"},{"location":"ZipHandler/#ziphandler","text":"The ZipHandler class in the PHP EPUB Processor library is responsible for handling ZIP file operations. It provides methods to extract contents from a ZIP file and to compress a directory into a ZIP file, facilitating the manipulation of EPUB files which are essentially ZIP archives.","title":"ZipHandler"},{"location":"ZipHandler/#key-methods","text":"extract(string $zipFilePath, string $destination): void : Extracts the contents of a ZIP file to the specified directory. Throws an exception if the ZIP file cannot be opened or extracted. compress(string $source, string $zipFilePath): void : Compresses a directory into a ZIP file at the specified path. Throws an exception if the ZIP file cannot be created or if the source directory is invalid.","title":"Key Methods"},{"location":"ZipHandler/#usage-example","text":"use PhpEpub\\ZipHandler; $zipHandler = new ZipHandler(); try { // Extract a ZIP file $zipHandler->extract('/path/to/file.zip', '/path/to/destination'); echo \"ZIP file extracted successfully.\"; // Compress a directory into a ZIP file $zipHandler->compress('/path/to/source', '/path/to/output.zip'); echo \"Directory compressed into ZIP file successfully.\"; } catch (Exception $e) { echo \"Error handling ZIP file: \" . $e->getMessage(); }","title":"Usage Example"},{"location":"Converters/CalibreAdapter/","text":"CalibreAdapter \u00b6 The CalibreAdapter class in the PHP EPUB Processor library is responsible for converting EPUB files to other formats using the Calibre command-line tool. It provides a flexible interface to execute conversions by leveraging Calibre's powerful ebook-convert utility. Key Methods \u00b6 __construct(array $options = [], FileSystemHelper $helper = new FileSystemHelper()) : Initializes the CalibreAdapter with optional command-line options for Calibre and a file system helper. Default options include the path to the Calibre executable and any extra arguments. convert(string $inputFile, string $outputPath): void : Converts an EPUB file to another format using Calibre. It constructs and executes a command-line call to ebook-convert . Throws an exception if the conversion fails or if the Calibre tool or input file is not found. Usage Example \u00b6 use PhpEpub\\Converters\\CalibreAdapter; use PhpEpub\\Util\\FileSystemHelper; $options = [ 'calibre_path' => '/usr/local/bin/ebook-convert', 'extra_args' => '--output-profile kindle', ]; $calibreAdapter = new CalibreAdapter($options, new FileSystemHelper()); try { $calibreAdapter->convert('/path/to/input.epub', '/path/to/output.mobi'); echo \"EPUB successfully converted to MOBI.\"; } catch (Exception $e) { echo \"Conversion failed: \" . $e->getMessage();","title":"Calibre Adapter"},{"location":"Converters/CalibreAdapter/#calibreadapter","text":"The CalibreAdapter class in the PHP EPUB Processor library is responsible for converting EPUB files to other formats using the Calibre command-line tool. It provides a flexible interface to execute conversions by leveraging Calibre's powerful ebook-convert utility.","title":"CalibreAdapter"},{"location":"Converters/CalibreAdapter/#key-methods","text":"__construct(array $options = [], FileSystemHelper $helper = new FileSystemHelper()) : Initializes the CalibreAdapter with optional command-line options for Calibre and a file system helper. Default options include the path to the Calibre executable and any extra arguments. convert(string $inputFile, string $outputPath): void : Converts an EPUB file to another format using Calibre. It constructs and executes a command-line call to ebook-convert . Throws an exception if the conversion fails or if the Calibre tool or input file is not found.","title":"Key Methods"},{"location":"Converters/CalibreAdapter/#usage-example","text":"use PhpEpub\\Converters\\CalibreAdapter; use PhpEpub\\Util\\FileSystemHelper; $options = [ 'calibre_path' => '/usr/local/bin/ebook-convert', 'extra_args' => '--output-profile kindle', ]; $calibreAdapter = new CalibreAdapter($options, new FileSystemHelper()); try { $calibreAdapter->convert('/path/to/input.epub', '/path/to/output.mobi'); echo \"EPUB successfully converted to MOBI.\"; } catch (Exception $e) { echo \"Conversion failed: \" . $e->getMessage();","title":"Usage Example"},{"location":"Converters/DompdfAdapter/","text":"DompdfAdapter \u00b6 The DompdfAdapter class in the PHP EPUB Processor library is responsible for converting EPUB content into PDF format using the Dompdf library. It provides a flexible interface to customize the PDF output through various styling options. Key Methods \u00b6 __construct(array $styles = []) : Initializes the DompdfAdapter with optional styling parameters, such as font, font size, paper size, and orientation. These parameters can be customized to alter the appearance of the generated PDF. convert(string $epubDirectory, string $outputPath): void : Converts the EPUB content to a PDF using Dompdf. It loads the content, sets the paper size and orientation, renders the PDF, and saves it to the specified output path. Throws an exception if the conversion fails. Usage Example \u00b6 use PhpEpub\\Converters\\DompdfAdapter; $styles = [ 'font' => 'Times New Roman', 'font_size' => 14, 'paper_size' => 'A4', 'orientation' => 'landscape', ]; $dompdfAdapter = new DompdfAdapter($styles); try { $dompdfAdapter->convert('/path/to/extracted/epub', '/path/to/output.pdf'); echo \"EPUB successfully converted to PDF.\"; } catch (Exception $e) { echo \"Conversion failed: \" . $e->getMessage(); }","title":"Dompdf Adapter"},{"location":"Converters/DompdfAdapter/#dompdfadapter","text":"The DompdfAdapter class in the PHP EPUB Processor library is responsible for converting EPUB content into PDF format using the Dompdf library. It provides a flexible interface to customize the PDF output through various styling options.","title":"DompdfAdapter"},{"location":"Converters/DompdfAdapter/#key-methods","text":"__construct(array $styles = []) : Initializes the DompdfAdapter with optional styling parameters, such as font, font size, paper size, and orientation. These parameters can be customized to alter the appearance of the generated PDF. convert(string $epubDirectory, string $outputPath): void : Converts the EPUB content to a PDF using Dompdf. It loads the content, sets the paper size and orientation, renders the PDF, and saves it to the specified output path. Throws an exception if the conversion fails.","title":"Key Methods"},{"location":"Converters/DompdfAdapter/#usage-example","text":"use PhpEpub\\Converters\\DompdfAdapter; $styles = [ 'font' => 'Times New Roman', 'font_size' => 14, 'paper_size' => 'A4', 'orientation' => 'landscape', ]; $dompdfAdapter = new DompdfAdapter($styles); try { $dompdfAdapter->convert('/path/to/extracted/epub', '/path/to/output.pdf'); echo \"EPUB successfully converted to PDF.\"; } catch (Exception $e) { echo \"Conversion failed: \" . $e->getMessage(); }","title":"Usage Example"},{"location":"Converters/TCPDFAdapter/","text":"TCPDFAdapter \u00b6 The TCPDFAdapter class in the PHP EPUB Processor library is responsible for converting EPUB content into PDF format using the TCPDF library. It provides a flexible interface to customize the PDF output through various styling options. Key Methods \u00b6 __construct(array $styles = []) : Initializes the TCPDFAdapter with optional styling parameters, such as font, font size, margins, and whether to include headers and footers. These parameters can be customized to alter the appearance of the generated PDF. convert(string $epubDirectory, string $outputPath): void : Converts the EPUB content to a PDF using TCPDF. It sets document information, applies styles, adds pages, writes content, and saves the PDF to the specified output path. Throws an exception if the conversion fails. Usage Example \u00b6 use PhpEpub\\Converters\\TCPDFAdapter; $styles = [ 'font' => 'times', 'font_size' => 14, 'margin_left' => 20, 'margin_top' => 30, 'margin_right' => 20, 'margin_bottom' => 30, 'header' => true, 'footer' => false, ]; $tcpdfAdapter = new TCPDFAdapter($styles); try { $tcpdfAdapter->convert('/path/to/extracted/epub', '/path/to/output.pdf'); echo \"EPUB successfully converted to PDF.\"; } catch (Exception $e) { echo \"Conversion failed: \" . $e->getMessage(); }","title":"TCPDF Adapter"},{"location":"Converters/TCPDFAdapter/#tcpdfadapter","text":"The TCPDFAdapter class in the PHP EPUB Processor library is responsible for converting EPUB content into PDF format using the TCPDF library. It provides a flexible interface to customize the PDF output through various styling options.","title":"TCPDFAdapter"},{"location":"Converters/TCPDFAdapter/#key-methods","text":"__construct(array $styles = []) : Initializes the TCPDFAdapter with optional styling parameters, such as font, font size, margins, and whether to include headers and footers. These parameters can be customized to alter the appearance of the generated PDF. convert(string $epubDirectory, string $outputPath): void : Converts the EPUB content to a PDF using TCPDF. It sets document information, applies styles, adds pages, writes content, and saves the PDF to the specified output path. Throws an exception if the conversion fails.","title":"Key Methods"},{"location":"Converters/TCPDFAdapter/#usage-example","text":"use PhpEpub\\Converters\\TCPDFAdapter; $styles = [ 'font' => 'times', 'font_size' => 14, 'margin_left' => 20, 'margin_top' => 30, 'margin_right' => 20, 'margin_bottom' => 30, 'header' => true, 'footer' => false, ]; $tcpdfAdapter = new TCPDFAdapter($styles); try { $tcpdfAdapter->convert('/path/to/extracted/epub', '/path/to/output.pdf'); echo \"EPUB successfully converted to PDF.\"; } catch (Exception $e) { echo \"Conversion failed: \" . $e->getMessage(); }","title":"Usage Example"}]}