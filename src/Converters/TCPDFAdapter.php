<?php

declare(strict_types=1);

namespace PhpEpub\Converters;

use PhpEpub\Exception;
use TCPDF;

class TCPDFAdapter implements ConverterInterface
{
    /**
     * @var array<string, mixed>
     */
    private array $styles;

    /**
     * TCPDFAdapter constructor.
     *
     * @param array<string, mixed> $styles Optional styling parameters.
     */
    public function __construct(array $styles = [])
    {
        // Default styling parameters
        $defaultStyles = [
            'font' => 'helvetica',
            'font_size' => 12,
            'margin_left' => 15,
            'margin_top' => 27,
            'margin_right' => 15,
            'margin_bottom' => 25,
            'header' => true,
            'footer' => true,
        ];

        // Merge default styles with user-provided styles
        $this->styles = array_merge($defaultStyles, $styles);
    }

    /**
     * Converts the EPUB content to a PDF using TCPDF.
     *
     * @param string $epubDirectory The directory containing the extracted EPUB contents.
     * @param string $outputPath The path where the converted PDF should be saved.
     *
     * @throws Exception If the conversion fails.
     */
    public function convert(string $epubDirectory, string $outputPath): void
    {
        // Initialize TCPDF
        $pdf = new TCPDF();

        // Set document information
        $pdf->SetCreator(PDF_CREATOR);
        $pdf->SetAuthor('Author Name'); // This should be extracted from EPUB metadata
        $pdf->SetTitle('EPUB to PDF Conversion');
        $pdf->SetSubject('EPUB Conversion');
        $pdf->SetKeywords('EPUB, PDF, conversion');

        // Set default header and footer
        if ($this->styles['header']) {
            $pdf->setHeaderData('', 0, 'EPUB to PDF', 'Generated by TCPDF');
        } else {
            $pdf->setPrintHeader(false);
        }

        if ($this->styles['footer']) {
            $pdf->setFooterData();
        } else {
            $pdf->setPrintFooter(false);
        }

        $marginLeft = 15;
        if (isset($this->styles['margin_left']) && is_int($this->styles['margin_left'])) {
            $marginLeft = $this->styles['margin_left'];
        }

        $marginTop = 27;
        if (isset($this->styles['margin_top']) && is_int($this->styles['margin_top'])) {
            $marginTop = $this->styles['margin_top'];
        }

        $marginRight = 15;
        if (isset($this->styles['margin_right']) && is_int($this->styles['margin_right'])) {
            $marginRight = $this->styles['margin_right'];
        }

        $marginBottom = 27;
        if (isset($this->styles['margin_bottom']) && is_int($this->styles['margin_bottom'])) {
            $marginBottom = $this->styles['margin_bottom'];
        }

        // Set margins
        $pdf->SetMargins($marginLeft, $marginTop, $marginRight);
        $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
        $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);
        $pdf->SetAutoPageBreak(true, $marginBottom);

        $font = 'helvetica';
        if (isset($this->styles['font']) && is_string($this->styles['font'])) {
            $font = $this->styles['font'];
        }

        $fontSize = 27;
        if (isset($this->styles['font_size']) && is_int($this->styles['font_size'])) {
            $fontSize = $this->styles['font_size'];
        }

        // Set font
        $pdf->SetFont($font, '', $fontSize);

        // Add a page
        $pdf->AddPage();

        // Load EPUB content (this is a simplified example)
        $content = $this->loadEpubContent($epubDirectory);

        // Write content to PDF
        $pdf->writeHTML($content, true, false, true, false, '');

        // Output PDF to file
        $pdf->Output($outputPath, 'F');
    }

    /**
     * Loads the EPUB content for conversion.
     *
     * @throws Exception If the content cannot be loaded.
     */
    private function loadEpubContent(string $epubDirectory): string
    {
        // Simplified example: Load content from a specific file
        $contentFile = $epubDirectory . '/content.xhtml'; // Adjust this path as needed
        if (! file_exists($contentFile)) {
            throw new Exception("Content file not found: {$contentFile}");
        }

        $content = file_get_contents($contentFile);
        if ($content === false) {
            throw new Exception("Failed to read content from: {$contentFile}");
        }

        return $content;
    }
}
